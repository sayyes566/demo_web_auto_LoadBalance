#!/bin/python
#coding=UTF-8
#pip install Flask
#pip install flask-mysql
#pip install multiprocessing
from flask import Flask, render_template, request
from flaskext.mysql import MySQL
from multiprocessing import Pool
from multiprocessing import cpu_count
import socket
import time
from threading import Timer

app = Flask(__name__)


def connectMySQL():
    mysql = MySQL()
    app.config['MYSQL_DATABASE_USER'] = 'root'
    app.config['MYSQL_DATABASE_PASSWORD'] = 'password'
    app.config['MYSQL_DATABASE_DB'] = 'demo'
    app.config['MYSQL_DATABASE_HOST'] = 'localhost'
    mysql.init_app(app)
    return mysql.connect()


def getVideos():
    conn = connectMySQL()
    cursor = conn.cursor()
    cursor.execute("SELECT * from video")
    videos = cursor.fetchall()
    json = {}
    for record in videos:
        json[str(record[1])] = str(record[2])
    return json

def test(v):
    print v



def stop_stress(pool):
    pool.close()
    pool.join()
    print('STOP STRESS')


def f(x):
    while True:
        x*x

def stressAllProcesses(stopSec):
    process = cpu_count()
    print 'utilizing %d cores\n' % process
    pool = Pool(process)
    #set stopping time
    t = Timer(stopSec, stop_stress, [pool])
    t.start()
    #start stress
    pool.map(f, range(process))

def initalData():
    data = {}
    #**need to validate*** get private ip
    data['IP'] = socket.gethostbyname(socket.gethostname())
    data['stress_stop_mins'] = 6
    #data['stress_start'] = test(data['stress_stop_mins'])
    #get vedios from DB
    data['videos'] = getVideos()
    return data

def indexTemplate():
    data = initalData()
    return render_template('./index.html', **data)

@app.route("/stress")
def stress():
    #Todo stress
    data = initalData()
    data['stress_stop_mins'] = request.args.get('mins', default = 6, type = int)
    test('start func')
    print("stress_min %d" % (data['stress_stop_mins']))
    
    time.sleep(1)
    print("======action stress======")
    stressAllProcesses(10)
    
    #return render_template('./index.html', **data)




@app.route("/")
def index():
    return indexTemplate()



if __name__ == '__main__':
    # **IMPORTANT** In demo need to recover to 80 port
    app.run(host='0.0.0.0', port=8009)



